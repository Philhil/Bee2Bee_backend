{
  "swagger" : "2.0",
  "info" : {
    "description" : "Algorithm-based Employee Exchange Platform Bee2Bee API",
    "version" : "1.0.0",
    "title" : "Algorithm-based Employee Exchange Platform Bee2Bee API",
    "contact" : {
      "url" : "https://github.com/BeeToBeeOrg/Bee2Bee_backend"
    },
    "license" : {
      "name" : "MIT"
    }
  },
  "tags" : [ {
    "name" : "user",
    "description" : ""
  }, {
    "name" : "company",
    "description" : "Firma"
  }, {
    "name" : "posting",
    "description" : "Posting"
  }, {
    "name" : "skill",
    "description" : ""
  } ],
  "paths" : {
    "/user" : {
      "post" : {
        "tags" : [ "user" ],
        "summary" : "Create a new user",
        "description" : "",
        "operationId" : "addUser",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "newUser",
          "description" : "New User Infos",
          "schema" : {
            "type" : "object",
            "required" : [ "email", "company_id", "name", "secret" ],
            "properties" : {
              "email" : {
                "type" : "string"
              },
              "secret" : {
                "type" : "string"
              },
              "name" : {
                "type" : "string"
              },
              "company_id" : {
                "type" : "integer"
              }
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "return the newly created user object",
            "schema" : {
              "$ref" : "#/definitions/User"
            }
          },
          "400" : {
            "description" : "bad input parameter"
          },
          "405" : {
            "description" : "Validation exception"
          }
        }
      }
    },
    "/user/auth" : {
      "post" : {
        "tags" : [ "user" ],
        "summary" : "Auth a user",
        "description" : "",
        "operationId" : "authUser",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "authUser",
          "description" : "Auth the user credentials",
          "schema" : {
            "type" : "object",
            "required" : [ "email", "secret" ],
            "properties" : {
              "email" : {
                "type" : "string"
              },
              "secret" : {
                "type" : "string"
              }
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "login success",
            "schema" : {
              "type" : "object",
              "properties" : {
                "token" : {
                  "type" : "string"
                }
              }
            }
          },
          "400" : {
            "description" : "bad input parameter"
          },
          "403" : {
            "description" : "login failed"
          },
          "405" : {
            "description" : "Validation exception"
          }
        }
      }
    },
    "/user/{token}" : {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "Find user by token",
        "description" : "Returns a single user",
        "operationId" : "getUserByToken",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "description" : "Session Token of User to return",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/User"
            }
          },
          "400" : {
            "description" : "Invalid Token supplied"
          },
          "404" : {
            "description" : "User not found"
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ]
      }
    },
    "/company" : {
      "post" : {
        "tags" : [ "company" ],
        "summary" : "Add a new company",
        "description" : "",
        "operationId" : "addCompany",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "newCompany",
          "description" : "New Company Infos",
          "schema" : {
            "type" : "object",
            "required" : [ "name", "address" ],
            "properties" : {
              "name" : {
                "type" : "string"
              },
              "address" : {
                "$ref" : "#/definitions/Address"
              }
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "return the newly created company",
            "schema" : {
              "$ref" : "#/definitions/Company"
            }
          },
          "400" : {
            "description" : "bad input parameter"
          },
          "405" : {
            "description" : "Validation exception"
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ]
      }
    },
    "/company/{company_id}" : {
      "get" : {
        "tags" : [ "company" ],
        "summary" : "Find company by ID",
        "description" : "Returns a single company",
        "operationId" : "getCompanyById",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "company_id",
          "in" : "path",
          "description" : "ID of Company to return",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Company"
            }
          },
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "Company not found"
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ]
      }
    },
    "/posting" : {
      "post" : {
        "tags" : [ "posting" ],
        "summary" : "Create a new posting hall",
        "description" : "",
        "operationId" : "add_posting",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "newPosting",
          "description" : "New Company Infos",
          "schema" : {
            "type" : "object",
            "required" : [ "title", "address", "posting_type", "company_id" ],
            "properties" : {
              "company_id" : {
                "type" : "integer"
              },
              "title" : {
                "type" : "string"
              },
              "description" : {
                "type" : "string"
              },
              "posting_type" : {
                "$ref" : "#/definitions/PostingType"
              },
              "num_people" : {
                "type" : "integer"
              },
              "work_time_start" : {
                "type" : "string"
              },
              "work_time_end" : {
                "type" : "string"
              },
              "travel_ability_needed" : {
                "type" : "boolean"
              },
              "travel_radius" : {
                "type" : "integer",
                "description" : "km"
              },
              "wage_hourly" : {
                "type" : "number"
              },
              "skills" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              },
              "address" : {
                "$ref" : "#/definitions/Address"
              }
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "return the newly created posting object",
            "schema" : {
              "$ref" : "#/definitions/Posting"
            }
          },
          "400" : {
            "description" : "bad input parameter"
          },
          "405" : {
            "description" : "Validation exception"
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "posting" ],
        "summary" : "Update an existing posting",
        "description" : "",
        "operationId" : "updatePosting",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Posting object",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PostingPut"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "Posting not found"
          },
          "405" : {
            "description" : "Validation exception"
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ]
      }
    },
    "/posting/{posting_id}" : {
      "get" : {
        "tags" : [ "posting" ],
        "summary" : "Find posting by ID",
        "description" : "Returns a single posting",
        "operationId" : "getPostingById",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "posting_id",
          "in" : "path",
          "description" : "ID of posting to return",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Posting"
            }
          },
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "Posting not found"
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "posting" ],
        "summary" : "Deletes a posting",
        "description" : "",
        "operationId" : "deletePosting",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "api_key",
          "in" : "header",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "posting_id",
          "in" : "path",
          "description" : "Posting id to delete",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "boolean"
            }
          },
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "Posting not found"
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ]
      }
    },
    "/posting/query/" : {
      "get" : {
        "tags" : [ "posting" ],
        "summary" : "Find demands in a specific region",
        "description" : "Returns a array of demands",
        "operationId" : "getDemandsByLocation",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "posting_query",
          "description" : "Query for postings",
          "schema" : {
            "type" : "object",
            "required" : [ "posting_type", "longitude", "latitude", "radius" ],
            "properties" : {
              "posting_type" : {
                "$ref" : "#/definitions/PostingType"
              },
              "longitude" : {
                "type" : "number"
              },
              "latitude" : {
                "type" : "number"
              },
              "radius" : {
                "type" : "integer"
              }
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Posting"
              }
            }
          },
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "Posting not found"
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ]
      }
    }
  },
  "securityDefinitions" : {
    "bee2bee_auth" : {
      "type" : "oauth2",
      "authorizationUrl" : "https://.../oauth/dialog",
      "flow" : "implicit"
    },
    "api_key" : {
      "type" : "apiKey",
      "name" : "api_key",
      "in" : "header"
    }
  },
  "definitions" : {
    "Address" : {
      "type" : "object",
      "required" : [ "zip_code", "city", "street" ],
      "properties" : {
        "zip_code" : {
          "type" : "string"
        },
        "city" : {
          "type" : "string"
        },
        "street" : {
          "type" : "string"
        },
        "number" : {
          "type" : "string"
        },
        "state" : {
          "type" : "string"
        },
        "country" : {
          "type" : "string"
        },
        "longitude" : {
          "type" : "string"
        },
        "latitude" : {
          "type" : "string"
        }
      }
    },
    "Company" : {
      "type" : "object",
      "required" : [ "name" ],
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64"
        },
        "name" : {
          "type" : "string",
          "example" : "Bee2Bee Company"
        },
        "address" : {
          "$ref" : "#/definitions/Address"
        }
      }
    },
    "User" : {
      "required" : [ "email", "id", "company_id" ],
      "properties" : {
        "id" : {
          "type" : "integer"
        },
        "company_id" : {
          "type" : "integer"
        },
        "name" : {
          "type" : "string",
          "example" : "John Doe"
        },
        "email" : {
          "type" : "string",
          "example" : "test@test.de"
        }
      }
    },
    "PostingType" : {
      "type" : "integer",
      "enum" : [ 1, 2 ],
      "description" : "Posting Type:\n  * 1 - supply\n  * 2 - demand\n"
    },
    "Posting" : {
      "required" : [ "company_id", "title", "description", "address" ],
      "properties" : {
        "id" : {
          "type" : "integer"
        },
        "company_id" : {
          "type" : "integer"
        },
        "title" : {
          "type" : "string",
          "example" : "title of this posting"
        },
        "description" : {
          "type" : "string",
          "example" : "detailed description of this posting"
        },
        "wage_hourly" : {
          "type" : "number",
          "example" : "price per working hour"
        },
        "address" : {
          "$ref" : "#/definitions/Address"
        },
        "num_people" : {
          "type" : "integer",
          "description" : "number of persons",
          "example" : 5
        },
        "posting_type" : {
          "$ref" : "#/definitions/PostingType"
        },
        "work_time_start" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Everyday Start Time of Job",
          "example" : "08:00:00"
        },
        "work_time_end" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Everyday End Time of Job",
          "example" : "08:00:00"
        },
        "travel_ability_needed" : {
          "type" : "boolean",
          "default" : false
        },
        "travel_radius" : {
          "type" : "integer",
          "description" : "km"
        },
        "skills" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "PostingPut" : {
      "required" : [ "id" ],
      "properties" : {
        "id" : {
          "type" : "integer"
        },
        "title" : {
          "type" : "string",
          "example" : "title of this posting"
        },
        "description" : {
          "type" : "string",
          "example" : "detailed description of this posting"
        },
        "wage_hourly" : {
          "type" : "number",
          "example" : "price per working hour"
        },
        "address" : {
          "$ref" : "#/definitions/Address"
        },
        "num_people" : {
          "type" : "integer",
          "description" : "number of persons",
          "example" : 5
        },
        "posting_type" : {
          "$ref" : "#/definitions/PostingType"
        },
        "work_time_start" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Everyday Start Time of Job",
          "example" : "08:00:00"
        },
        "work_time_end" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Everyday End Time of Job",
          "example" : "08:00:00"
        },
        "travel_ability_needed" : {
          "type" : "boolean",
          "default" : false
        },
        "travel_radius" : {
          "type" : "integer",
          "description" : "km"
        },
        "skills" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    }
  },
  "host" : "virtserver.swaggerhub.com",
  "basePath" : "/Bee2Bee/Bee2Bee/1.0.0",
  "schemes" : [ "https" ]
}